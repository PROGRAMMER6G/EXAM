#include <stdio.h>

int n,c[20][20],i,j,visited[20];

void main()
{
printf("Enter number of vertices \n");
 scanf("%d",&n);
 printf("Enter the cost matrix \n");
 for(i=1;i<=n;i++)
 {
    for(j=1;j<=n;j++)
	scanf("%d",&c[i][j]);
  visited[i]=0;
 }
 prim();
 }

prim()
{
 int min,b,a,count=0,cost=0;
 min=999;
 visited[1]=1; /* 1st vertex is visited */
 while(count<n-1)
 {
  min=999;
  for(i=1;i<=n;i++)
    for(j=1;j<=n;j++)
      if(visited[i] && !visited[j] && min>c[i][j]) /* if i is visited but j is not visited and c[i][j] < min*/
      {
       min=c[i][j]; /* assign c[i][j] as minimum cost*/ 
       a=i;
       b=j;
      }
   printf("%d--->%d = %d\n",a,b,c[a][b]); /* prints each edge in the MST and its cost */
   cost+=c[a][b]; /* adds the minimum cost */
   visited[b]=1;
   count++;
  } //end while
  printf("Total cost of Spanning tree is %d",cost); /* cost holds the minimum cost of the MST */
 }
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
void main()
{
 int n,i,j,a[10][10],s[10],d[10],v,k,min,u;
 printf("Enter the number of vertices\n");
 scanf("%d",&n);
 printf("Enter the cost matrix \n");
 printf("Enter 999 if no edge between vertices \n");
 for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
   scanf("%d",&a[i][j]);
 printf("Enter the source vertex \n");
 scanf("%d",&v);
 for(i=1;i<=n;i++)
 {
  s[i]=0;
  d[i]=a[v][i];
 }
 d[v]=0;
 s[v]=1;
 for(k=2;k<=n;k++)
 {
  min=999;
  for(i=1;i<=n;i++)
   if(s[i]==0 && d[i]<min)
   {
    min=d[i];
    u=i;
   }
   s[u]=1;
   for(i=1;i<=n;i++)
     if(s[i]==0)
     {
      if(d[i]>(d[u]+a[u][i]))
	 d[i]=d[u]+a[u][i];
     }
  }
  printf("The shortest distance from %d is \n",v);
  for(i=1;i<=n;i++)
   printf("%d-->%d=%d\n",v,i,d[i]);
  }
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
#include <string.h>
#include <stdio.h>
char str[100],ptn[20];
int res,m,n,len,len1,i,j,k,table[1000];
void main()
{
printf("Enter the text \n");
 gets(str);
 printf("Enter the pattern to be found \n");
 gets(ptn);
 res=horspool(ptn,str);
 if(res==-1)
     printf("\nPattern not found\n");
 else
     printf("Pattern found at %d position \n",res+1);
}

void shift(char p[])
{
 len=strlen(p);
 for(i=0;i<1000;i++)
   table[i]=len;
 for(j=0;j<=len-2;j++)
  table[p[j]]=len-1-j;
}

int horspool(char p[], char t[])
{
 shift(p);
 m=strlen(p);
 n=strlen(t);
 i=m-1;
 while(i<=n-1)
 {
  k=0;
  while(k<=m-1 && (p[m-1-k]==t[i-k]))
	k++;
  if(k==m)
        return i-m+1;
  else
        i=i+table[t[i]];
 }
 return -1;
}
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
void heapify(int arr[], int N, int i)
{
	int largest = i;
	int left = 2 * i + 1;
	int right = 2 * i + 2;
	if (left < N && arr[left] > arr[largest])
		largest = left;
	if (right < N && arr[right] > arr[largest])
		largest = right;
	if (largest != i) {
		swap(&arr[i], &arr[largest]);
		heapify(arr, N, largest);
	}
}
void heapSort(int arr[], int N)
{
	for (int i = N / 2 - 1; i >= 0; i--)
		heapify(arr, N, i);
	for (int i = N - 1; i >= 0; i--) {
		swap(&arr[0], &arr[i]);
		heapify(arr, i, 0);
	}
}
    void printArray(int arr[], int N)
    {
    	for (int i = 0; i < N; i++)
    		printf("%d ", arr[i]);
    	printf("\n");
    }
    int main()
    {
    	int arr[] = { 12, 11, 13, 5, 6, 7 };
    	int N = sizeof(arr) / sizeof(arr[0]);
    	heapSort(arr, N);
    	printf("Sorted array is\n");
    	printArray(arr, N);
    }